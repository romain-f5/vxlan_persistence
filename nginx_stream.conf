stream {
   # leverage nginx js to create a connection identifyer
   js_include vxlan.js;
   js_set $vxlan_client_id setClientId;

  #health-check send/receive response match -
    match dns_lookup {
        send \x44\x1c\x01\x20\x00\x01\x00\x00\x00\x00\x00\x01\x03\x77\x77\x77\x07\x65\x78\x61\x6d\x70\x6c\x65\x03\x63\x6f\x6d\x00\x00\x01\x00\x01\x00\x00\x29\x10\x00\x00\x00\x00\x00\x00\x00;
        expect ~* \x00\x0a;
    }

   log_format vxlan '$remote_addr [$time_local] $protocol $bytes_received '
                 '$bytes_sent $upstream_addr $vxlan_client_id'; # include vxlan clientId

   server {
      status_zone udp_stream;
      listen 4789 udp;
      preread_buffer_size 1k; #maybe too big
      js_preread getClientId; # parse packet for clientId

      proxy_pass stream_backend;
      health_check port=53 match=dns_lookup interval=20 fails=3 passes=1 udp;

      access_log /var/log/nginx/vxlan_access.log vxlan;
      error_log /var/log/nginx/vxlan_error.log debug;

   }

   upstream stream_backend {
      zone stream_zone 64k;
      server 10.245.1.76:4789 max_fails=0;
      server 10.245.1.243:4789 max_fails=0;
      hash $vxlan_client_id consistent; # sesssion persistence against clientId
   }

}
